#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Mon Aug  5 12:04:22 2019
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./configure
match_max 100000
expect -exact "Configuring the Unipept backend program.\r
What is the minimum length (inclusive) for tryptic peptides? \[5\] "
send -- "5\r"
expect -exact "5\r
What is the maximum length (inclusive) for tryptic peptides? \[50\] "
send -- "50\r"
expect -exact "50\r
What is the length (k) of the K-mer peptides? \[9\] "
send -- "9\r"
expect -exact "9\r
Where should I store the final TSV files (large, single-write)? \[./data/tables\] "
send -- "\r"
expect -exact "\r
Where should I store intermediate TSV files (large, single-write, multiple-read? \[./data/intermediate\] "
send -- "\r"
expect -exact "\r
Where should I store and extract the downloaded taxon zip (small, single-write, single-read)? \[./data/taxon\] "
send -- "\r"
expect -exact "\r
Where should I store the downloaded source xml files (large, single-write, single-read)? \[./data/sources\] "
send -- "\r"
expect -exact "\r
How much memory should Java use? \[6g\] "
send -- "2g\r"
expect -exact "2g\r
Which batch size should I use for communication with Entrez? \[1000\] "
send -- "1000\r"
expect -exact "1000\r
Which sort command should I use? \[sort --buffer-size=80% --parallel=4\] "
send -- "\r"
expect -exact "\r
Which pipe compression command should I use? \[gzip -\] "
send -- "\r"
expect -exact "\r
Which pipe decompression command (e.g. zcat, gzcat) should I use? \[zcat\] "
send -- "\r"
expect -exact "\r
How do I unzip while discarding dates? \[unzip -DD\] "
send -- "\r"
expect -exact "\r
What's my sed executable (e.g. sed, gsed)? \[sed\] "
send -- "\r"
expect -exact "\r
What's my gnu awk executable (e.g. awk, gawk)? \[awk\] "
send -- "gawk\r"
expect -exact "\r
What's my gnu mktemp executable (e.g. mktemp, gmktemp)? \[mktemp\] "
send -- "\r"
expect -exact "\r
What's my gnu join executable (e.g. join, gjoin)? \[join\] "
send -- "\r"
expect -exact "\r
Parse swissprot (http://ftp.expasy.org/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.xml.gz)? \[Y/n\] "
send -- "\r"
expect -exact "\r
Parse trembl (http://ftp.ebi.ac.uk/pub/databases/uniprot/knowledgebase/uniprot_trembl.xml.gz)? \[Y/n\] "
send -- "n\r"
expect -exact "n\r
Add another source by entering the name. An empty name cancels: "
send -- "\r"
expect eof
